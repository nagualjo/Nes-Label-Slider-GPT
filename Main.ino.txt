// NES Label GPT V2 - main.ino (Versión con interfaz táctil interactiva)
// Autoría colaborativa: Nagual_Jo + ChatGPT

#include <TFT_eSPI.h>
#include <SPI.h>
#include <FS.h>
#include <SD.h>
#include <JPEGDecoder.h>
#include <TouchScreen.h>
#include <EEPROM.h>
#include <SoftwareSerial.h>
#include <DFMiniMp3.h>
#include <vector>
#include <algorithm>
#include <WiFi.h>
#include <time.h>

// -----------------------------
// CONFIGURACIÓN DE PINES Y OBJETOS
// -----------------------------
#define SD_CS 5
#define PWM_BACKLIGHT 32
#define TOUCH_IRQ 12

TFT_eSPI tft = TFT_eSPI();
TouchScreen ts = TouchScreen();

// -----------------------------
// VARIABLES GLOBALES
// -----------------------------
int currentIndex = 0;
bool randomMode = false;
int brillo = 128;
int volumen = 20;
unsigned long lastInteraction = 0;

std::vector<String> imageList;
std::vector<String> shuffledList;

// -----------------------------
// FUNCIONES AUXILIARES
// -----------------------------
void applyBrightness(int value) {
  analogWrite(PWM_BACKLIGHT, value);
}

void applyVolume(int value) {
  // Aquí se comunica con el módulo MP3
}

void saveConfig() {
  EEPROM.write(0, randomMode);
  EEPROM.write(1, brillo);
  EEPROM.write(2, volumen);
  EEPROM.commit();
}

void loadConfig() {
  EEPROM.begin(10);
  randomMode = EEPROM.read(0);
  brillo = EEPROM.read(1);
  volumen = EEPROM.read(2);
}

void shuffleImages() {
  shuffledList = imageList;
  std::random_shuffle(shuffledList.begin(), shuffledList.end());
}

String getNextImage() {
  if (randomMode) {
    return shuffledList[currentIndex++ % shuffledList.size()];
  } else {
    return imageList[currentIndex++ % imageList.size()];
  }
}

// -----------------------------
// DIBUJO DE INTERFAZ
// -----------------------------
void drawTouchMenu() {
  tft.fillScreen(TFT_BLACK);
  tft.setTextColor(TFT_WHITE);
  tft.setTextSize(2);

  // Brillo
  tft.fillRect(20, 40, 40, 40, TFT_BLUE);
  tft.drawString("-", 35, 50);
  tft.fillRect(100, 40, 40, 40, TFT_BLUE);
  tft.drawString("+", 115, 50);
  tft.drawString("Brillo", 50, 90);

  // Volumen
  tft.fillRect(20, 120, 40, 40, TFT_GREEN);
  tft.drawString("-", 35, 130);
  tft.fillRect(100, 120, 40, 40, TFT_GREEN);
  tft.drawString("+", 115, 130);
  tft.drawString("Volumen", 40, 170);

  // Modo aleatorio
  tft.fillRect(20, 200, 120, 40, randomMode ? TFT_RED : TFT_DARKGREY);
  tft.drawString("Aleatorio", 30, 210);
}

void handleTouchMenu(int x, int y) {
  if (x > 20 && x < 60 && y > 40 && y < 80) {
    brillo = max(0, brillo - 16);
  } else if (x > 100 && x < 140 && y > 40 && y < 80) {
    brillo = min(255, brillo + 16);
  } else if (x > 20 && x < 60 && y > 120 && y < 160) {
    volumen = max(0, volumen - 1);
  } else if (x > 100 && x < 140 && y > 120 && y < 160) {
    volumen = min(30, volumen + 1);
  } else if (x > 20 && x < 140 && y > 200 && y < 240) {
    randomMode = !randomMode;
    if (randomMode) shuffleImages();
  }

  applyBrightness(brillo);
  applyVolume(volumen);
  saveConfig();
  drawTouchMenu();
}

// -----------------------------
// SETUP
// -----------------------------
void setup() {
  Serial.begin(115200);
  tft.begin();
  tft.setRotation(1);

  pinMode(PWM_BACKLIGHT, OUTPUT);
  analogWrite(PWM_BACKLIGHT, brillo);

  loadConfig();
  applyBrightness(brillo);
  applyVolume(volumen);

  if (!SD.begin(SD_CS)) {
    tft.println("SD init fail");
    return;
  }

  File root = SD.open("/");
  while (true) {
    File file = root.openNextFile();
    if (!file) break;
    String name = file.name();
    if (name.endsWith(".png")) imageList.push_back(name);
    file.close();
  }

  if (randomMode) shuffleImages();
  drawTouchMenu();
}

// -----------------------------
// LOOP PRINCIPAL
// -----------------------------
void loop() {
  TSPoint p = ts.getPoint();
  if (p.z > 100) {
    int x = map(p.x, 200, 3800, 0, tft.width());
    int y = map(p.y, 200, 3800, 0, tft.height());
    handleTouchMenu(x, y);
    delay(300);
  }

  // Aquí iría el código de reproducción o visualización
  // Solo estamos en menú de configuración por ahora
}
